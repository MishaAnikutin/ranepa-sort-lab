data <- test()
data <- test()
data <- test()
print("Строим график")
build_time_plot(xmin = 250, xmax = 10000, step = 250)
source("sorts.R")
source("unit_tests.R")
source("plots.R")
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 250, xmax = 10000, step = 250)
print("График построен")
}
main()
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 250, xmax = 5000, step = 250)
print("График построен")
}
main()
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 250, xmax = 5000, step = 250)
print("График построен")
}
main()
source("plots.R")
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 250, xmax = 5000, step = 250)
print("График построен")
}
main()
source("plots.R")
source("plots.R")
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 250, xmax = 5000, step = 250)
print("График построен")
}
main()
source("plots.R")
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 250, xmax = 5000, step = 250)
print("График построен")
}
main()
source("plots.R")
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 250, xmax = 10000, step = 250)
print("График построен")
}
main()
generate_data(sort, x)
x <- seq(10, 10000, by = 100)
generate_data(sort, x)
x <- seq(10, 1000000, by = 100)
generate_data(sort, x)
x <- seq(100000, 1000000, by = 100000)
generate_data(sort, x)
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 100000, xmax = 1000000, step = 100000)
print("График построен")
}
main()
generate_data <- function(sorting_algorithm, x) {
#' Генерация данных времени исполнения
#'
#' @param sort_algorithm: Function - алгоритм сортировки
#' @param x: Numeric - список размеров случайных списков, по которому будем делать замеры
#' @return time: Numeric - список времени выполнения функции
time <- c()
counter <- 0
n <- length(x)
for (n in x) {
print(counter / n)
sa_timer <- timer(sorting_algorithm)
time <- c(time, sa_timer(get_random_list(n)))
}
return(time)
}
source("plots.R")
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 100000, xmax = 1000000, step = 100000)
print("График построен")
}
main()
source("plots.R")
main <- function() {
data <- test()
if (is.na(data[2])) print("Все тесты прошли успешно!")
else {
print("Тестирование прервалось с ошибкой:", data[2])
return()
}
print("Строим график")
build_time_plot(xmin = 100000, xmax = 1000000, step = 100000)
print("График построен")
}
main()
