func_name <- function(func) return(deparse(substitute(func)))

get_random_list <- function(n = NULL) {
  #' Возвращает список случайных списков
  #' 
  #' @param n: int - размер списка
  #' @return _: numeric
  
  if (is.null(n)) n = 10
  return(sample(1:100, n))
}

test_sort <- function(sort_function) {
  #' Тестирует функцию сортировки 
  #' 
  #' На пустом списке, на списке из 1 элемента, на отсортированном списке
  #' на отсортированном в обратном порядке и случайных списках
  #' 
  #' @param sort_function: function - функция сортировки 
  #' @return _: bool - прошла ли тест
  
  if (!identical(sort_function(c()), c())) {
    cat("Пустой список не отсортировался\n")
    return(FALSE)
  }
  if (!identical(sort_function(c(1)), c(1))) {
    cat("Список длины 1 не отсортировался\n")
    return(FALSE) 
  }
  
  random_list <- get_random_list()
  
  if (!identical(sort_function(sort(random_list)), sort(sort(random_list)))) {
    cat("отсортированный список не отсортировался\n")
    return(FALSE)
  } 
  if (!identical(sort_function(sort(random_list)[length(random_list):1]), sort(sort(random_list)))) {
    cat("отсортированный в обратном порядке список не отсортировался\n")
    return(FALSE)
  } 
  
  if (!identical(sort_function(random_list), sort(random_list))) {
    cat("Рандомный список не отсортировался: ", random_list, "\n")
    return(FALSE)
  } 
  
  return(TRUE)
}

test <- function(sort_functions) {
  for (sort_function in sort_functions) {
    if (!test_sort(sort_function)) {
      cat(func_name(test_sort), "не прошла тест\n")
      return(FALSE)
    }
  }
  cat("Все тесты прошли успешно")
  return(TRUE)
}

test(c(bubblesort_1, bubblesort_2))

